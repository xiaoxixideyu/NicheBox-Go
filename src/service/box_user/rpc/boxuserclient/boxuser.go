// Code generated by goctl. DO NOT EDIT.
// Source: box_user.proto

package boxuserclient

import (
	"context"

	"nichebox/service/box_user/rpc/pb/boxuser"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOwnerRequest  = boxuser.AddOwnerRequest
	AddOwnerResponse = boxuser.AddOwnerResponse
	IsOwnerRequest   = boxuser.IsOwnerRequest
	IsOwnerResponse  = boxuser.IsOwnerResponse

	BoxUser interface {
		AddOwner(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error)
		AddOwnerRevert(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error)
		IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error)
	}

	defaultBoxUser struct {
		cli zrpc.Client
	}
)

func NewBoxUser(cli zrpc.Client) BoxUser {
	return &defaultBoxUser{
		cli: cli,
	}
}

func (m *defaultBoxUser) AddOwner(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error) {
	client := boxuser.NewBoxUserClient(m.cli.Conn())
	return client.AddOwner(ctx, in, opts...)
}

func (m *defaultBoxUser) AddOwnerRevert(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error) {
	client := boxuser.NewBoxUserClient(m.cli.Conn())
	return client.AddOwnerRevert(ctx, in, opts...)
}

func (m *defaultBoxUser) IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error) {
	client := boxuser.NewBoxUserClient(m.cli.Conn())
	return client.IsOwner(ctx, in, opts...)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: box_user.proto

package boxuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoxUser_AddOwner_FullMethodName       = "/boxuserclient.BoxUser/AddOwner"
	BoxUser_AddOwnerRevert_FullMethodName = "/boxuserclient.BoxUser/AddOwnerRevert"
)

// BoxUserClient is the client API for BoxUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxUserClient interface {
	AddOwner(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error)
	AddOwnerRevert(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error)
}

type boxUserClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxUserClient(cc grpc.ClientConnInterface) BoxUserClient {
	return &boxUserClient{cc}
}

func (c *boxUserClient) AddOwner(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error) {
	out := new(AddOwnerRequest)
	err := c.cc.Invoke(ctx, BoxUser_AddOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxUserClient) AddOwnerRevert(ctx context.Context, in *AddOwnerRequest, opts ...grpc.CallOption) (*AddOwnerRequest, error) {
	out := new(AddOwnerRequest)
	err := c.cc.Invoke(ctx, BoxUser_AddOwnerRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxUserServer is the server API for BoxUser service.
// All implementations must embed UnimplementedBoxUserServer
// for forward compatibility
type BoxUserServer interface {
	AddOwner(context.Context, *AddOwnerRequest) (*AddOwnerRequest, error)
	AddOwnerRevert(context.Context, *AddOwnerRequest) (*AddOwnerRequest, error)
	mustEmbedUnimplementedBoxUserServer()
}

// UnimplementedBoxUserServer must be embedded to have forward compatible implementations.
type UnimplementedBoxUserServer struct {
}

func (UnimplementedBoxUserServer) AddOwner(context.Context, *AddOwnerRequest) (*AddOwnerRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOwner not implemented")
}
func (UnimplementedBoxUserServer) AddOwnerRevert(context.Context, *AddOwnerRequest) (*AddOwnerRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOwnerRevert not implemented")
}
func (UnimplementedBoxUserServer) mustEmbedUnimplementedBoxUserServer() {}

// UnsafeBoxUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxUserServer will
// result in compilation errors.
type UnsafeBoxUserServer interface {
	mustEmbedUnimplementedBoxUserServer()
}

func RegisterBoxUserServer(s grpc.ServiceRegistrar, srv BoxUserServer) {
	s.RegisterService(&BoxUser_ServiceDesc, srv)
}

func _BoxUser_AddOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxUserServer).AddOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxUser_AddOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxUserServer).AddOwner(ctx, req.(*AddOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxUser_AddOwnerRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxUserServer).AddOwnerRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxUser_AddOwnerRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxUserServer).AddOwnerRevert(ctx, req.(*AddOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxUser_ServiceDesc is the grpc.ServiceDesc for BoxUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boxuserclient.BoxUser",
	HandlerType: (*BoxUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOwner",
			Handler:    _BoxUser_AddOwner_Handler,
		},
		{
			MethodName: "AddOwnerRevert",
			Handler:    _BoxUser_AddOwnerRevert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box_user.proto",
}

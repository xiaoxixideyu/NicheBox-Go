// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: box_info.proto

package boxinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoxInfo_CreateBid_FullMethodName       = "/boxinfoclient.BoxInfo/CreateBid"
	BoxInfo_CreateBox_FullMethodName       = "/boxinfoclient.BoxInfo/CreateBox"
	BoxInfo_CreateBoxRevert_FullMethodName = "/boxinfoclient.BoxInfo/CreateBoxRevert"
)

// BoxInfoClient is the client API for BoxInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxInfoClient interface {
	CreateBid(ctx context.Context, in *CreateBidRequest, opts ...grpc.CallOption) (*CreateBidResponse, error)
	CreateBox(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*CreateBoxResponse, error)
	CreateBoxRevert(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*CreateBoxResponse, error)
}

type boxInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxInfoClient(cc grpc.ClientConnInterface) BoxInfoClient {
	return &boxInfoClient{cc}
}

func (c *boxInfoClient) CreateBid(ctx context.Context, in *CreateBidRequest, opts ...grpc.CallOption) (*CreateBidResponse, error) {
	out := new(CreateBidResponse)
	err := c.cc.Invoke(ctx, BoxInfo_CreateBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxInfoClient) CreateBox(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*CreateBoxResponse, error) {
	out := new(CreateBoxResponse)
	err := c.cc.Invoke(ctx, BoxInfo_CreateBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxInfoClient) CreateBoxRevert(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*CreateBoxResponse, error) {
	out := new(CreateBoxResponse)
	err := c.cc.Invoke(ctx, BoxInfo_CreateBoxRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxInfoServer is the server API for BoxInfo service.
// All implementations must embed UnimplementedBoxInfoServer
// for forward compatibility
type BoxInfoServer interface {
	CreateBid(context.Context, *CreateBidRequest) (*CreateBidResponse, error)
	CreateBox(context.Context, *CreateBoxRequest) (*CreateBoxResponse, error)
	CreateBoxRevert(context.Context, *CreateBoxRequest) (*CreateBoxResponse, error)
	mustEmbedUnimplementedBoxInfoServer()
}

// UnimplementedBoxInfoServer must be embedded to have forward compatible implementations.
type UnimplementedBoxInfoServer struct {
}

func (UnimplementedBoxInfoServer) CreateBid(context.Context, *CreateBidRequest) (*CreateBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBid not implemented")
}
func (UnimplementedBoxInfoServer) CreateBox(context.Context, *CreateBoxRequest) (*CreateBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBox not implemented")
}
func (UnimplementedBoxInfoServer) CreateBoxRevert(context.Context, *CreateBoxRequest) (*CreateBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoxRevert not implemented")
}
func (UnimplementedBoxInfoServer) mustEmbedUnimplementedBoxInfoServer() {}

// UnsafeBoxInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxInfoServer will
// result in compilation errors.
type UnsafeBoxInfoServer interface {
	mustEmbedUnimplementedBoxInfoServer()
}

func RegisterBoxInfoServer(s grpc.ServiceRegistrar, srv BoxInfoServer) {
	s.RegisterService(&BoxInfo_ServiceDesc, srv)
}

func _BoxInfo_CreateBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxInfoServer).CreateBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxInfo_CreateBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxInfoServer).CreateBid(ctx, req.(*CreateBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxInfo_CreateBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxInfoServer).CreateBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxInfo_CreateBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxInfoServer).CreateBox(ctx, req.(*CreateBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxInfo_CreateBoxRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxInfoServer).CreateBoxRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxInfo_CreateBoxRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxInfoServer).CreateBoxRevert(ctx, req.(*CreateBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxInfo_ServiceDesc is the grpc.ServiceDesc for BoxInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boxinfoclient.BoxInfo",
	HandlerType: (*BoxInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBid",
			Handler:    _BoxInfo_CreateBid_Handler,
		},
		{
			MethodName: "CreateBox",
			Handler:    _BoxInfo_CreateBox_Handler,
		},
		{
			MethodName: "CreateBoxRevert",
			Handler:    _BoxInfo_CreateBoxRevert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box_info.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: box-content.proto

package box_content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoxContent_GetPostList_FullMethodName        = "/boxcontentclient.BoxContent/GetPostList"
	BoxContent_UpdateNewPosts_FullMethodName     = "/boxcontentclient.BoxContent/UpdateNewPosts"
	BoxContent_UpdateDeletedPosts_FullMethodName = "/boxcontentclient.BoxContent/UpdateDeletedPosts"
)

// BoxContentClient is the client API for BoxContent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxContentClient interface {
	GetPostList(ctx context.Context, in *GetPostListRequest, opts ...grpc.CallOption) (*GetPostListResponse, error)
	UpdateNewPosts(ctx context.Context, in *UpdateNewPostsRequest, opts ...grpc.CallOption) (*UpdateNewPostsResponse, error)
	UpdateDeletedPosts(ctx context.Context, in *UpdateDeletedPostsRequest, opts ...grpc.CallOption) (*UpdateDeletedPostsResponse, error)
}

type boxContentClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxContentClient(cc grpc.ClientConnInterface) BoxContentClient {
	return &boxContentClient{cc}
}

func (c *boxContentClient) GetPostList(ctx context.Context, in *GetPostListRequest, opts ...grpc.CallOption) (*GetPostListResponse, error) {
	out := new(GetPostListResponse)
	err := c.cc.Invoke(ctx, BoxContent_GetPostList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxContentClient) UpdateNewPosts(ctx context.Context, in *UpdateNewPostsRequest, opts ...grpc.CallOption) (*UpdateNewPostsResponse, error) {
	out := new(UpdateNewPostsResponse)
	err := c.cc.Invoke(ctx, BoxContent_UpdateNewPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxContentClient) UpdateDeletedPosts(ctx context.Context, in *UpdateDeletedPostsRequest, opts ...grpc.CallOption) (*UpdateDeletedPostsResponse, error) {
	out := new(UpdateDeletedPostsResponse)
	err := c.cc.Invoke(ctx, BoxContent_UpdateDeletedPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxContentServer is the server API for BoxContent service.
// All implementations must embed UnimplementedBoxContentServer
// for forward compatibility
type BoxContentServer interface {
	GetPostList(context.Context, *GetPostListRequest) (*GetPostListResponse, error)
	UpdateNewPosts(context.Context, *UpdateNewPostsRequest) (*UpdateNewPostsResponse, error)
	UpdateDeletedPosts(context.Context, *UpdateDeletedPostsRequest) (*UpdateDeletedPostsResponse, error)
	mustEmbedUnimplementedBoxContentServer()
}

// UnimplementedBoxContentServer must be embedded to have forward compatible implementations.
type UnimplementedBoxContentServer struct {
}

func (UnimplementedBoxContentServer) GetPostList(context.Context, *GetPostListRequest) (*GetPostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostList not implemented")
}
func (UnimplementedBoxContentServer) UpdateNewPosts(context.Context, *UpdateNewPostsRequest) (*UpdateNewPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewPosts not implemented")
}
func (UnimplementedBoxContentServer) UpdateDeletedPosts(context.Context, *UpdateDeletedPostsRequest) (*UpdateDeletedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeletedPosts not implemented")
}
func (UnimplementedBoxContentServer) mustEmbedUnimplementedBoxContentServer() {}

// UnsafeBoxContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxContentServer will
// result in compilation errors.
type UnsafeBoxContentServer interface {
	mustEmbedUnimplementedBoxContentServer()
}

func RegisterBoxContentServer(s grpc.ServiceRegistrar, srv BoxContentServer) {
	s.RegisterService(&BoxContent_ServiceDesc, srv)
}

func _BoxContent_GetPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxContentServer).GetPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxContent_GetPostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxContentServer).GetPostList(ctx, req.(*GetPostListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxContent_UpdateNewPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxContentServer).UpdateNewPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxContent_UpdateNewPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxContentServer).UpdateNewPosts(ctx, req.(*UpdateNewPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxContent_UpdateDeletedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeletedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxContentServer).UpdateDeletedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxContent_UpdateDeletedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxContentServer).UpdateDeletedPosts(ctx, req.(*UpdateDeletedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxContent_ServiceDesc is the grpc.ServiceDesc for BoxContent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxContent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boxcontentclient.BoxContent",
	HandlerType: (*BoxContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostList",
			Handler:    _BoxContent_GetPostList_Handler,
		},
		{
			MethodName: "UpdateNewPosts",
			Handler:    _BoxContent_UpdateNewPosts_Handler,
		},
		{
			MethodName: "UpdateDeletedPosts",
			Handler:    _BoxContent_UpdateDeletedPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box-content.proto",
}

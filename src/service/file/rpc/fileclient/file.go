// Code generated by goctl. DO NOT EDIT.
// Source: file.proto

package fileclient

import (
	"context"

	"nichebox/service/file/rpc/pb/file"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetFileUrlRequest   = file.GetFileUrlRequest
	GetFileUrlResponse  = file.GetFileUrlResponse
	UploadImageRequest  = file.UploadImageRequest
	UploadImageResponse = file.UploadImageResponse

	File interface {
		UploadImage(ctx context.Context, opts ...grpc.CallOption) (file.File_UploadImageClient, error)
		GetFileUrl(ctx context.Context, in *GetFileUrlRequest, opts ...grpc.CallOption) (*GetFileUrlResponse, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

func (m *defaultFile) UploadImage(ctx context.Context, opts ...grpc.CallOption) (file.File_UploadImageClient, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.UploadImage(ctx, opts...)
}

func (m *defaultFile) GetFileUrl(ctx context.Context, in *GetFileUrlRequest, opts ...grpc.CallOption) (*GetFileUrlResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.GetFileUrl(ctx, in, opts...)
}

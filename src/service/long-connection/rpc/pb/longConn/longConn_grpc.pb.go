// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: longConn.proto

package longConn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LongConn_HandShake_FullMethodName = "/longconnclient.longConn/HandShake"
)

// LongConnClient is the client API for LongConn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LongConnClient interface {
	HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error)
}

type longConnClient struct {
	cc grpc.ClientConnInterface
}

func NewLongConnClient(cc grpc.ClientConnInterface) LongConnClient {
	return &longConnClient{cc}
}

func (c *longConnClient) HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error) {
	out := new(HandShakeResponse)
	err := c.cc.Invoke(ctx, LongConn_HandShake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LongConnServer is the server API for LongConn service.
// All implementations must embed UnimplementedLongConnServer
// for forward compatibility
type LongConnServer interface {
	HandShake(context.Context, *HandShakeRequest) (*HandShakeResponse, error)
	mustEmbedUnimplementedLongConnServer()
}

// UnimplementedLongConnServer must be embedded to have forward compatible implementations.
type UnimplementedLongConnServer struct {
}

func (UnimplementedLongConnServer) HandShake(context.Context, *HandShakeRequest) (*HandShakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandShake not implemented")
}
func (UnimplementedLongConnServer) mustEmbedUnimplementedLongConnServer() {}

// UnsafeLongConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LongConnServer will
// result in compilation errors.
type UnsafeLongConnServer interface {
	mustEmbedUnimplementedLongConnServer()
}

func RegisterLongConnServer(s grpc.ServiceRegistrar, srv LongConnServer) {
	s.RegisterService(&LongConn_ServiceDesc, srv)
}

func _LongConn_HandShake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandShakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongConnServer).HandShake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LongConn_HandShake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongConnServer).HandShake(ctx, req.(*HandShakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LongConn_ServiceDesc is the grpc.ServiceDesc for LongConn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LongConn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "longconnclient.longConn",
	HandlerType: (*LongConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandShake",
			Handler:    _LongConn_HandShake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "longConn.proto",
}

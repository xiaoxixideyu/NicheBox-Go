// Code generated by goctl. DO NOT EDIT.
// Source: feed.proto

package feedclient

import (
	"context"

	"nichebox/service/feed/rpc/pb/feed"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FeedMessage  = feed.FeedMessage
	PullRequest  = feed.PullRequest
	PullResponse = feed.PullResponse
	PushRequest  = feed.PushRequest
	PushResponse = feed.PushResponse

	Feed interface {
		Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
		Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error)
	}

	defaultFeed struct {
		cli zrpc.Client
	}
)

func NewFeed(cli zrpc.Client) Feed {
	return &defaultFeed{
		cli: cli,
	}
}

func (m *defaultFeed) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	client := feed.NewFeedClient(m.cli.Conn())
	return client.Push(ctx, in, opts...)
}

func (m *defaultFeed) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error) {
	client := feed.NewFeedClient(m.cli.Conn())
	return client.Pull(ctx, in, opts...)
}

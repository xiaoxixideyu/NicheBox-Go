// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentclient

import (
	"context"

	"nichebox/service/comment/rpc/pb/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentInfo                    = comment.CommentInfo
	CommentRequest                 = comment.CommentRequest
	CommentResponse                = comment.CommentResponse
	DeleteCommentRequest           = comment.DeleteCommentRequest
	DeleteCommentResponse          = comment.DeleteCommentResponse
	GetCommentRequest              = comment.GetCommentRequest
	GetCommentResponse             = comment.GetCommentResponse
	GetCommentsFromSubjectRequest  = comment.GetCommentsFromSubjectRequest
	GetCommentsFromSubjectResponse = comment.GetCommentsFromSubjectResponse
	GetSubCommentsRequest          = comment.GetSubCommentsRequest
	GetSubCommentsResponse         = comment.GetSubCommentsResponse
	GetSubjectRequest              = comment.GetSubjectRequest
	GetSubjectResponse             = comment.GetSubjectResponse

	Comment interface {
		Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
		GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
		GetCommentsFromSubject(ctx context.Context, in *GetCommentsFromSubjectRequest, opts ...grpc.CallOption) (*GetCommentsFromSubjectResponse, error)
		GetSubComments(ctx context.Context, in *GetSubCommentsRequest, opts ...grpc.CallOption) (*GetSubCommentsResponse, error)
		GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*GetSubjectResponse, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.Comment(ctx, in, opts...)
}

func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

func (m *defaultComment) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetComment(ctx, in, opts...)
}

func (m *defaultComment) GetCommentsFromSubject(ctx context.Context, in *GetCommentsFromSubjectRequest, opts ...grpc.CallOption) (*GetCommentsFromSubjectResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetCommentsFromSubject(ctx, in, opts...)
}

func (m *defaultComment) GetSubComments(ctx context.Context, in *GetSubCommentsRequest, opts ...grpc.CallOption) (*GetSubCommentsResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetSubComments(ctx, in, opts...)
}

func (m *defaultComment) GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*GetSubjectResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetSubject(ctx, in, opts...)
}
